# Generated by Django 4.2.2 on 2023-09-03 13:52
import ast
import csv
import logging
import os

from django.conf import settings
from django.db import migrations

from common.utils import UnicodeDictReader, get_frozen_treebeard_model

logger = logging.getLogger(__name__)


def forwards(apps, schema_editor):

    ClassifiedProduct = get_frozen_treebeard_model(apps.get_model("common", "ClassifiedProduct"))
    UnitOfMeasure = apps.get_model("common", "UnitOfMeasure")
    load_plain_prefixed_products(ClassifiedProduct)
    update_classifiedproducts_from_fdw(ClassifiedProduct)
    update_kcals_per_unit(ClassifiedProduct, UnitOfMeasure)


def load_plain_prefixed_products(ClassifiedProduct):
    """
    Load the plain CPC v2.1 data (with the leading R, P, S character)
    """
    logging.info("Loading plain classified products ...")
    f = os.path.splitext(os.path.abspath(__file__))[0] + ".txt"
    records_added = 0
    records_failed = 0
    with open(f, "r") as f:
        for row in UnicodeDictReader(f, delimiter=";"):
            try:
                if len(row["cpcv2"]) == 2:
                    ClassifiedProduct.add_root(**row)
                else:
                    if row["cpcv2"] in ["L02", "P03", "P04"]:
                        parent = ClassifiedProduct.objects.get(pk="R0")
                    elif row["cpcv2"] in ["P022", "P023", "P024", "P029"]:
                        parent = ClassifiedProduct.objects.get(pk="L02")
                    else:
                        parent = ClassifiedProduct.objects.get(pk=row["cpcv2"][:-1])
                    parent.add_child(**row)
                records_added += 1
            except Exception as e:
                records_failed += 1
                logging.info(f"{e} for row {row}")
    logging.info("%d records added" % records_added)
    logging.info("%d records failed" % records_failed)


def update_classifiedproducts_from_fdw(ClassifiedProduct):
    """
    Update the records based on an extract of current data from FDW to add the common name, aliases and hs2012
    """
    logging.info("Updating common name from fdw ...")
    records_updated = 0
    records_skipped = 0
    fdw_products = []
    fdw_products_file = os.path.join(os.path.dirname(__file__), "0005_load_classified_product_fdw.csv")
    with open(fdw_products_file, encoding="utf-8-sig") as csv_file:
        csv_reader = csv.DictReader(csv_file)

        for row in csv_reader:
            fdw_products.append(row)

    for classified_product in ClassifiedProduct.objects.all():
        fdw_product = [product for product in fdw_products if product["cpcv2"] == classified_product.cpcv2]
        if fdw_product and len(fdw_product) == 1:
            classified_product.common_name = fdw_product[0]["common_name"]
            if len(fdw_product[0]["aliases"]) > 0:
                classified_product.aliases = {"other_names": ast.literal_eval(fdw_product[0]["aliases"])}
            if len(fdw_product[0]["hs2012"]) > 0:
                classified_product.hs2012 = {"hs2012_codes": ast.literal_eval(fdw_product[0]["hs2012"])}
            classified_product.save()
            records_updated += 1
        else:
            records_skipped += 1
            logging.info(
                f"Skipping ... failed to fetch {classified_product.cpcv2} from FDW, "
                f"perhaps product is version cpcv2.1"
            )

    logging.info("%d records updated common_name from FDW" % records_updated)
    logging.info("%d records skipped updating common_name" % records_skipped)


def update_kcals_per_unit(ClassifiedProduct, UnitOfMeasure):
    """
    Update the records based on the kilocalorie table in to add the kcals_per_unit and unit_of_measure
    """
    logging.info("Updating kcals and unit_of_measure ...")
    kcal_file = os.path.join(os.path.dirname(__file__), "0005_load_classified_product_kcal_per_kg.txt")
    records_updated = 0
    records_failed = 0
    records_skipped = 0
    with open(kcal_file, "r") as f:
        for row in UnicodeDictReader(f, delimiter=";"):
            try:
                if row["cpcv2"]:
                    product = ClassifiedProduct.objects.get(pk=row["cpcv2"])
                    product.kcals_per_unit = row["kcal_per_kg"]
                    if row["unit_of_measure"]:
                        unit_of_measure = UnitOfMeasure.objects.get_or_create(
                            **{"abbreviation": row["unit_of_measure"], "unit_type": "Weight"}
                        )  # Typically are Weight I think
                        product.unit_code = unit_of_measure[0].abbreviation
                    product.save()
                    records_updated += 1
                else:
                    records_skipped += 1
            except Exception as e:
                records_failed += 1
                logging.info(f"{e} for row {row}")

    logging.info("%d records updated kcals and unit_of_measure" % records_updated)
    logging.info("%d records failed updating  kcals and unit_of_measure" % records_failed)
    logging.info("%d records skipped updating kcals and unit_of_measure" % records_skipped)


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0004_alter_classifiedproduct"),
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ]
