# Generated by Django 4.2.4 on 2023-10-23 03:21

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.db import migrations, models

import common.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("common", "0001_initial"),
        ("metadata", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Community",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="A short identifier for the Community",
                        max_length=25,
                        null=True,
                        verbose_name="Code",
                    ),
                ),
                ("name", common.fields.NameField(max_length=60, verbose_name="Name")),
                (
                    "full_name",
                    common.fields.NameField(
                        help_text="The full name the Community, including the parent administrative units.",
                        max_length=200,
                        verbose_name="Full Name",
                    ),
                ),
                (
                    "geography",
                    django.contrib.gis.db.models.fields.GeometryField(
                        blank=True, geography=True, null=True, srid=4326, verbose_name="geography"
                    ),
                ),
                (
                    "interview_number",
                    models.CharField(
                        blank=True,
                        help_text="The interview number or interview code assigned to the Community",
                        max_length=10,
                        null=True,
                        verbose_name="Interview Number",
                    ),
                ),
                (
                    "community_interview_date",
                    models.DateField(
                        blank=True,
                        help_text="The date that the Community Interview (Form 3) was conducted.",
                        null=True,
                        verbose_name="Community Interview Date",
                    ),
                ),
                (
                    "wealth_group_interview_date",
                    models.DateField(
                        blank=True,
                        help_text="The date that the Wealth Group Interviews (Form 4) were conducted.",
                        null=True,
                        verbose_name="Wealth Group Interview Date",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community",
                "verbose_name_plural": "Communities",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodActivity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            ("MilkProduction", "Milk Production"),
                            ("ButterProduction", "Butter Production"),
                            ("MeatProduction", "Meat Production"),
                            ("LivestockSale", "Livestock Sale"),
                            ("CropProduction", "Crop Production"),
                            ("FoodPurchase", "Food Purchase"),
                            ("PaymentInKind", "Payment in Kind"),
                            ("ReliefGiftOther", "Relief, Gift or Other Food"),
                            ("Fishing", "Fishing"),
                            ("WildFoodGathering", "Wild Food Gathering"),
                            ("OtherCashIncome", "Other Cash Income"),
                            ("OtherPurchase", "Other Purchase"),
                        ],
                        db_index=True,
                        help_text="The type of livelihood strategy, such as crop production, or wild food gathering.",
                        max_length=30,
                        verbose_name="Strategy Type",
                    ),
                ),
                (
                    "scenario",
                    models.CharField(
                        choices=[("baseline", "Baseline"), ("response", "Response")],
                        help_text="The scenario in which the outputs of this Livelihood Activity apply, e.g. baseline or response.",
                        max_length=20,
                        verbose_name="Scenario",
                    ),
                ),
                (
                    "quantity_produced",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Produced"),
                ),
                (
                    "quantity_purchased",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Purchased"),
                ),
                (
                    "quantity_sold",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Sold/Exchanged"),
                ),
                (
                    "quantity_other_uses",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Other Uses"),
                ),
                (
                    "quantity_consumed",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Consumed"),
                ),
                ("price", models.FloatField(blank=True, help_text="Price per unit", null=True, verbose_name="Price")),
                ("income", models.FloatField(blank=True, help_text="Income", null=True)),
                ("expenditure", models.FloatField(blank=True, help_text="Expenditure", null=True)),
                (
                    "kcals_consumed",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Total kcals consumed by a household in the reference year from this livelihood strategy",
                        null=True,
                        verbose_name="Total kcals consumed",
                    ),
                ),
                (
                    "percentage_kcals",
                    models.FloatField(
                        blank=True,
                        help_text="Percentage of annual household kcal requirement provided by this livelihood strategy",
                        null=True,
                        verbose_name="Percentage of required kcals",
                    ),
                ),
                (
                    "household_labor_provider",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("men", "Mainly Men"),
                            ("women", "Mainly Women"),
                            ("children", "Mainly Children"),
                            ("all", "All Together"),
                        ],
                        max_length=10,
                        verbose_name="Activity done by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Activity",
                "verbose_name_plural": "Livelihood Activities",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodZone",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Primary identifier for the Livelihood Zone",
                        max_length=25,
                        primary_key=True,
                        serialize=False,
                        verbose_name="code",
                    ),
                ),
                ("name", common.fields.NameField(max_length=200, unique=True, verbose_name="Name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="Description",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        db_column="country_code",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="common.country",
                        verbose_name="Country",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Zone",
                "verbose_name_plural": "Livelihood Zones",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodZoneBaseline",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", common.fields.NameField(max_length=200, unique=True, verbose_name="Name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="Description",
                    ),
                ),
                (
                    "geography",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, geography=True, null=True, srid=4326, verbose_name="geography"
                    ),
                ),
                ("bss", models.FileField(upload_to="livelihoodzonebaseline/bss", verbose_name="BSS Excel file")),
                (
                    "profile_report",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="livelihoodzonebaseline/profile_report",
                        verbose_name="Profile Report PDF file",
                    ),
                ),
                (
                    "reference_year_start_date",
                    models.DateField(
                        help_text="The first day of the month of the start month in the reference year",
                        verbose_name="Reference Year Start Date",
                    ),
                ),
                (
                    "reference_year_end_date",
                    models.DateField(
                        help_text="The last day of the month of the end month in the reference year",
                        verbose_name="Reference Year End Date",
                    ),
                ),
                (
                    "valid_from_date",
                    models.DateField(
                        blank=True,
                        help_text="The first day of the month that this baseline is valid from",
                        null=True,
                        verbose_name="Valid From Date",
                    ),
                ),
                (
                    "valid_to_date",
                    models.DateField(
                        blank=True,
                        help_text="The last day of the month that this baseline is valid until",
                        null=True,
                        verbose_name="Valid To Date",
                    ),
                ),
                (
                    "data_collection_start_date",
                    models.DateField(
                        blank=True,
                        help_text="The first day of data collection period",
                        null=True,
                        verbose_name="Data Collection Start Date",
                    ),
                ),
                (
                    "data_collection_end_date",
                    models.DateField(
                        blank=True,
                        help_text="The last day of the data collection period",
                        null=True,
                        verbose_name="Data Collection End Date",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        help_text="The day that the baseline was published",
                        null=True,
                        verbose_name="Publication Date",
                    ),
                ),
                (
                    "population_source",
                    models.CharField(
                        blank=True,
                        help_text="The data source for the Population Estimate, e.g. National Bureau of Statistics",
                        max_length=120,
                        verbose_name="Population Source",
                    ),
                ),
                (
                    "population_estimate",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The estimated population of the Livelihood Zone during the reference year",
                        null=True,
                        verbose_name="Population Estimate",
                    ),
                ),
                (
                    "livelihood_zone",
                    models.ForeignKey(
                        db_column="livelihood_zone_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.livelihoodzone",
                        verbose_name="Livelihood Zone",
                    ),
                ),
                (
                    "main_livelihood_category",
                    models.ForeignKey(
                        db_column="livelihood_category_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.livelihoodcategory",
                        verbose_name="Livelihood Zone Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Zone Baseline",
                "verbose_name_plural": "Livelihood Zone Baselines",
            },
        ),
        migrations.CreateModel(
            name="SeasonalActivity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="baseline_seasonal_activities",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        db_column="product_code",
                        help_text="Product, e.g. full fat milk",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="baseline_seasonal_activities",
                        to="common.classifiedproduct",
                        verbose_name="Product",
                    ),
                ),
                ("season", models.ManyToManyField(to="metadata.season", verbose_name="Season")),
                (
                    "seasonal_activity_type",
                    models.ForeignKey(
                        db_column="seasonal_activity_type_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.seasonalactivitytype",
                        verbose_name="Seasonal Activity Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Seasonal Activity",
                "verbose_name_plural": "Seasonal Activities",
            },
        ),
        migrations.CreateModel(
            name="SourceOrganization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", common.fields.NameField(max_length=200, unique=True, verbose_name="Name")),
                ("full_name", common.fields.NameField(max_length=300, unique=True, verbose_name="full name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Source Organization",
                "verbose_name_plural": "Source Organizations",
            },
        ),
        migrations.CreateModel(
            name="WealthGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "percentage_of_households",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Percentage of households in the Community or Livelihood Zone that are in this Wealth Group",
                        null=True,
                        verbose_name="Percentage of households",
                    ),
                ),
                (
                    "average_household_size",
                    models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Average household size"),
                ),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.community",
                        verbose_name="Community",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wealth_groups",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "wealth_group_category",
                    models.ForeignKey(
                        db_column="wealth_group_category_code",
                        help_text="Wealth Group Category, e.g. Poor or Better Off",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.wealthgroupcategory",
                        verbose_name="Wealth Group Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group",
                "verbose_name_plural": "Wealth Groups",
            },
        ),
        migrations.CreateModel(
            name="ButterProduction",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Butter Production",
                "verbose_name_plural": "Butter Production",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="FoodPurchase",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "unit_multiple",
                    models.PositiveSmallIntegerField(
                        help_text="Multiple of the unit of measure in a single purchase", verbose_name="Unit Multiple"
                    ),
                ),
                ("times_per_month", models.FloatField(verbose_name="Purchases per month")),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of months in a year that the product is purchased",
                        verbose_name="Months per year",
                    ),
                ),
                (
                    "times_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of times in a year that the purchase is made", verbose_name="Times per year"
                    ),
                ),
            ],
            options={
                "verbose_name": "Food Purchase",
                "verbose_name_plural": "Food Purchases",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="MeatProduction",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "animals_slaughtered",
                    models.PositiveSmallIntegerField(verbose_name="Number of animals slaughtered"),
                ),
                ("carcass_weight", models.FloatField(verbose_name="Carcass weight per animal")),
            ],
            options={
                "verbose_name": "Meat Production",
                "verbose_name_plural": "Meat Production",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="MilkProduction",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                ("milking_animals", models.PositiveSmallIntegerField(verbose_name="Number of milking animals")),
                (
                    "lactation_days",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Average number of days of lactation"
                    ),
                ),
                (
                    "daily_production",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Average daily milk production per animal"
                    ),
                ),
                (
                    "quantity_butter_production",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Quantity used for Butter Production"
                    ),
                ),
                (
                    "type_of_milk_consumed",
                    models.CharField(
                        choices=[("skim", "Skim"), ("whole", "whole")],
                        max_length=10,
                        verbose_name="Skim or whole milk consumed",
                    ),
                ),
                (
                    "type_of_milk_sold_or_other_uses",
                    models.CharField(
                        choices=[("skim", "Skim"), ("whole", "whole")],
                        max_length=10,
                        verbose_name="Skim or whole milk sold or used for other purposes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Milk Production",
                "verbose_name_plural": "Milk Production",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="OtherCashIncome",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "payment_per_time",
                    models.PositiveSmallIntegerField(
                        help_text="Amount of money received each time the labor is performed",
                        verbose_name="Payment per time",
                    ),
                ),
                (
                    "people_per_household",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of household members who perform the labor",
                        null=True,
                        verbose_name="People per household",
                    ),
                ),
                ("times_per_month", models.FloatField(blank=True, null=True, verbose_name="Labor per month")),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of months in a year that the labor is performed",
                        null=True,
                        verbose_name="Months per year",
                    ),
                ),
                (
                    "times_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of times in a year that the income is received",
                        verbose_name="Times per year",
                    ),
                ),
            ],
            options={
                "verbose_name": "Other Cash Income",
                "verbose_name_plural": "Other Cash Income",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="OtherPurchase",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "unit_multiple",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Multiple of the unit of measure in a single purchase",
                        null=True,
                        verbose_name="Unit Multiple",
                    ),
                ),
                ("times_per_month", models.FloatField(blank=True, null=True, verbose_name="Purchases per month")),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of months in a year that the product is purchased",
                        null=True,
                        verbose_name="Months per year",
                    ),
                ),
                (
                    "times_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of times in a year that the product is purchased",
                        verbose_name="Times per year",
                    ),
                ),
            ],
            options={
                "verbose_name": "Other Purchase",
                "verbose_name_plural": "Other Purchases",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="PaymentInKind",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "payment_per_time",
                    models.PositiveSmallIntegerField(
                        help_text="Amount of item received each time the labor is performed",
                        verbose_name="Payment per time",
                    ),
                ),
                (
                    "people_per_household",
                    models.PositiveSmallIntegerField(
                        help_text="Number of household members who perform the labor",
                        verbose_name="People per household",
                    ),
                ),
                ("times_per_month", models.FloatField(verbose_name="Labor per month")),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of months in a year that the labor is performed",
                        verbose_name="Months per year",
                    ),
                ),
                (
                    "times_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of times in a year that the labor is performed",
                        verbose_name="Times per year",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment in Kind",
                "verbose_name_plural": "Payments in Kind",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="ReliefGiftOther",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "unit_multiple",
                    models.PositiveSmallIntegerField(
                        help_text="Multiple of the unit of measure received each time", verbose_name="Unit Multiple"
                    ),
                ),
                (
                    "times_per_month",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Number of times per month the item is received"
                    ),
                ),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of months in a year that the item is received",
                        null=True,
                        verbose_name="Months per year",
                    ),
                ),
                (
                    "times_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of times in a year that the item is received", verbose_name="Times per year"
                    ),
                ),
            ],
            options={
                "verbose_name": "Relief, Gift or Other Food",
                "verbose_name_plural": "Relief, Gifts and Other Food",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="WealthGroupCharacteristicValue",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "reference_type",
                    models.CharField(
                        choices=[
                            ("community_interview", "Community Interview (Form 3)"),
                            ("wealth_group_interview", "Wealth Group Interview (Form 4)"),
                            ("baseline_summary", "Baseline Summary"),
                        ],
                        db_index=True,
                        help_text="The reference type of this Wealth Group Characteristic Value, such as a Community Interview (Form 3), Wealth Group Interview (Form 4) or the Baseline Summary",
                        max_length=30,
                        verbose_name="Reference Type",
                    ),
                ),
                (
                    "value",
                    models.JSONField(
                        help_text="A single property value, eg, a float, str or list, not a dict of props.",
                        verbose_name="value",
                    ),
                ),
                (
                    "min_value",
                    models.JSONField(
                        blank=True,
                        help_text="The minimum value of the possible range for this value.",
                        null=True,
                        verbose_name="min_value",
                    ),
                ),
                (
                    "max_value",
                    models.JSONField(
                        blank=True,
                        help_text="The maximum value of the possible range for this value.",
                        null=True,
                        verbose_name="max_value",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        db_column="product_code",
                        help_text="Product, e.g. Cattle",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="wealth_group_characteristic_values",
                        to="common.classifiedproduct",
                        verbose_name="Product",
                    ),
                ),
                (
                    "unit_of_measure",
                    models.ForeignKey(
                        blank=True,
                        db_column="unit_code",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="wealth_group_characteristic_values",
                        to="common.unitofmeasure",
                        verbose_name="Unit of Measure",
                    ),
                ),
                (
                    "wealth_characteristic",
                    models.ForeignKey(
                        db_column="wealth_characteristic_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.wealthcharacteristic",
                        verbose_name="Wealth Characteristic",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Characteristic Value",
                "verbose_name_plural": "Wealth Characteristic Values",
            },
        ),
        migrations.CreateModel(
            name="SeasonalActivityOccurrence",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "start",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(365),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="Start Day",
                    ),
                ),
                (
                    "end",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(365),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="End Day",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="seasonal_activities",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "seasonal_activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.seasonalactivity",
                        verbose_name="Seasonal Activity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Seasonal Activity Occurrence",
                "verbose_name_plural": "Seasonal Activity Occurrences",
            },
        ),
        migrations.CreateModel(
            name="MarketPrice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=100,
                        verbose_name="Description",
                    ),
                ),
                (
                    "low_price_start",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(365),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="Low Price Start Day",
                    ),
                ),
                (
                    "low_price_end",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(365),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="Low Price End Day",
                    ),
                ),
                ("low_price", models.FloatField(verbose_name="Low price")),
                (
                    "high_price_start",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(365),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="High Price Start Day",
                    ),
                ),
                (
                    "high_price_end",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(365),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="High Price End Day",
                    ),
                ),
                ("high_price", models.FloatField(verbose_name="High price")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        db_column="currency_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="common.currency",
                        verbose_name="Currency",
                    ),
                ),
                (
                    "market",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to="metadata.market"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        db_column="product_code",
                        help_text="Product, e.g. full fat milk",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="market_prices",
                        to="common.classifiedproduct",
                        verbose_name="Product",
                    ),
                ),
                (
                    "unit_of_measure",
                    models.ForeignKey(
                        db_column="unit_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="common.unitofmeasure",
                        verbose_name="Unit of Measure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Market Price",
                "verbose_name_plural": "Market Prices",
            },
        ),
        migrations.AddField(
            model_name="livelihoodzonebaseline",
            name="source_organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                to="baseline.sourceorganization",
                verbose_name="Source Organization",
            ),
        ),
        migrations.CreateModel(
            name="LivelihoodStrategy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            ("MilkProduction", "Milk Production"),
                            ("ButterProduction", "Butter Production"),
                            ("MeatProduction", "Meat Production"),
                            ("LivestockSale", "Livestock Sale"),
                            ("CropProduction", "Crop Production"),
                            ("FoodPurchase", "Food Purchase"),
                            ("PaymentInKind", "Payment in Kind"),
                            ("ReliefGiftOther", "Relief, Gift or Other Food"),
                            ("Fishing", "Fishing"),
                            ("WildFoodGathering", "Wild Food Gathering"),
                            ("OtherCashIncome", "Other Cash Income"),
                            ("OtherPurchase", "Other Purchase"),
                        ],
                        db_index=True,
                        help_text="The type of livelihood strategy, such as crop production, or wild food gathering.",
                        max_length=30,
                        verbose_name="Strategy Type",
                    ),
                ),
                (
                    "additional_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Additional text identifying the livelihood strategy",
                        max_length=60,
                        verbose_name="Additional Identifer",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        db_column="currency_code",
                        help_text="Currency of income or expenditure from this Livelihood Strategy",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="common.currency",
                        verbose_name="Currency",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="livelihood_strategies",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        db_column="product_code",
                        help_text="Product, e.g. full fat milk",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="livelihood_strategies",
                        to="common.classifiedproduct",
                        verbose_name="Product",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="metadata.season",
                        verbose_name="Season",
                    ),
                ),
                (
                    "unit_of_measure",
                    models.ForeignKey(
                        db_column="unit_code",
                        help_text="Unit used to measure production from this Livelihood Strategy",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="common.unitofmeasure",
                        verbose_name="Unit of Measure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Strategy",
                "verbose_name_plural": "Livelihood Strategies",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodProductCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "basket",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Main Staple"),
                            (2, "Other Staple"),
                            (3, "Non-food survival"),
                            (4, "Livelihoods Protection"),
                        ],
                        verbose_name="Product Basket",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="staple_foods",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        db_column="product_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="staple_foods",
                        to="common.classifiedproduct",
                        verbose_name="Product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Product Category",
                "verbose_name_plural": "Livelihood Product Categories",
            },
        ),
        migrations.AddField(
            model_name="livelihoodactivity",
            name="livelihood_strategy",
            field=models.ForeignKey(
                help_text="Livelihood Strategy",
                on_delete=django.db.models.deletion.PROTECT,
                to="baseline.livelihoodstrategy",
            ),
        ),
        migrations.AddField(
            model_name="livelihoodactivity",
            name="livelihood_zone_baseline",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="livelihood_activities",
                to="baseline.livelihoodzonebaseline",
                verbose_name="Livelihood Zone Baseline",
            ),
        ),
        migrations.AddField(
            model_name="livelihoodactivity",
            name="wealth_group",
            field=models.ForeignKey(
                help_text="Wealth Group", on_delete=django.db.models.deletion.PROTECT, to="baseline.wealthgroup"
            ),
        ),
        migrations.CreateModel(
            name="Hazard",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "chronic_or_periodic",
                    models.CharField(
                        choices=[("chronic", "Chronic"), ("periodic", "Periodic")],
                        max_length=10,
                        verbose_name="Chronic or Periodic",
                    ),
                ),
                (
                    "ranking",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Most Important"), (2, "Important"), (3, "Less Important")],
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="Performance rank must be at least 1."
                            ),
                            django.core.validators.MaxValueValidator(5, message="Performance rank must be at most 5."),
                        ],
                        verbose_name="Ranking",
                    ),
                ),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=255,
                        verbose_name="Description of Event(s) and/or Response(s)",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "hazard_category",
                    models.ForeignKey(
                        db_column="hazard_category_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.hazardcategory",
                        verbose_name="Hazard Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hazard",
                "verbose_name_plural": "Hazards",
            },
        ),
        migrations.CreateModel(
            name="ExpandabilityFactor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "percentage_produced",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Produced"),
                ),
                (
                    "percentage_sold",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Sold/Exchanged"),
                ),
                (
                    "percentage_other_uses",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Other Uses"),
                ),
                (
                    "percentage_consumed",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Quantity Consumed"),
                ),
                ("percentage_income", models.FloatField(blank=True, help_text="Income", null=True)),
                ("percentage_expenditure", models.FloatField(blank=True, help_text="Expenditure", null=True)),
                ("remark", models.TextField(blank=True, max_length=255, null=True, verbose_name="Remark")),
                (
                    "livelihood_strategy",
                    models.ForeignKey(
                        help_text="Livelihood Strategy",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="baseline.livelihoodstrategy",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Expandability Factor",
                "verbose_name_plural": "Expandability Factor",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "event_year_start_date",
                    models.DateField(
                        help_text="The first day of the month of the start month in the event year",
                        verbose_name="Event Year Start Date",
                    ),
                ),
                (
                    "event_year_end_date",
                    models.DateField(
                        help_text="The last day of the month of the end month in the event year",
                        verbose_name="Event Year End Date",
                    ),
                ),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=255,
                        verbose_name="Description of Event(s) and/or Response(s)",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
            },
        ),
        migrations.CreateModel(
            name="CopingStrategy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("leaders", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "strategy",
                    models.CharField(
                        choices=[("reduce", "Reduce"), ("increase", "Increase")],
                        max_length=20,
                        verbose_name="Strategy",
                    ),
                ),
                ("by_value", models.PositiveSmallIntegerField(verbose_name="Reduce or increase by")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "livelihood_strategy",
                    models.ForeignKey(
                        help_text="Livelihood Strategy",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="baseline.livelihoodstrategy",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Coping Strategy",
                "verbose_name_plural": "Coping Strategies",
            },
        ),
        migrations.CreateModel(
            name="CommunityLivestock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "birth_interval",
                    models.PositiveSmallIntegerField(
                        help_text="Number of months between Births", verbose_name="Birth Interval"
                    ),
                ),
                (
                    "wet_season_lactation_period",
                    models.PositiveSmallIntegerField(
                        help_text="Number of days of lactation during the wet season",
                        verbose_name="Wet Season Lactation Period",
                    ),
                ),
                (
                    "wet_season_milk_production",
                    models.PositiveSmallIntegerField(
                        help_text="Number of litres produced each day during the wet season",
                        verbose_name="Wet Season Milk Production",
                    ),
                ),
                (
                    "dry_season_lactation_period",
                    models.PositiveSmallIntegerField(
                        help_text="Number of days of lactation during the dry season",
                        verbose_name="Dry Season Lactation Period",
                    ),
                ),
                (
                    "dry_season_milk_production",
                    models.PositiveSmallIntegerField(
                        help_text="Number of litres produced each day during the dry season",
                        verbose_name="Dry Season Milk Production",
                    ),
                ),
                (
                    "age_at_sale",
                    models.PositiveSmallIntegerField(
                        help_text="Age in months at which the animal is typically sold/exchanged",
                        verbose_name="Age at Sale",
                    ),
                ),
                (
                    "additional_attributes",
                    models.JSONField(blank=True, null=True, verbose_name="Additional Attributes"),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.community",
                        verbose_name="Wealth Group",
                    ),
                ),
                (
                    "livestock",
                    models.ForeignKey(
                        db_column="livestock_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="common.classifiedproduct",
                        verbose_name="Livestock Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group Attribute",
                "verbose_name_plural": "Wealth Group Attributes",
            },
        ),
        migrations.CreateModel(
            name="CommunityCropProduction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "crop_purpose",
                    models.CharField(
                        choices=[("food", "Main Food Crop"), ("cash", "Cash Crop")],
                        max_length=20,
                        verbose_name="Crop purpose",
                    ),
                ),
                (
                    "yield_with_inputs",
                    models.FloatField(
                        help_text="Yield in reference period with inputs (seeds and fertilizer)",
                        verbose_name="Yield with inputs",
                    ),
                ),
                (
                    "yield_without_inputs",
                    models.FloatField(
                        help_text="Yield in reference period without inputs (seeds and fertilizer)",
                        verbose_name="Yield without inputs",
                    ),
                ),
                ("seed_requirement", models.FloatField(verbose_name="Seed requirement")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "crop",
                    models.ForeignKey(
                        db_column="crop_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="common.classifiedproduct",
                        verbose_name="Crop Type",
                    ),
                ),
                (
                    "crop_unit_of_measure",
                    models.ForeignKey(
                        db_column="crop_unit_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="crop_production_crop",
                        to="common.unitofmeasure",
                        verbose_name="Crop Unit of Measure",
                    ),
                ),
                (
                    "land_unit_of_measure",
                    models.ForeignKey(
                        db_column="land_unit_code",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="crop_production_land",
                        to="common.unitofmeasure",
                        verbose_name="Land Unit of Measure",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.season",
                        verbose_name="Season",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Crop Production",
                "verbose_name_plural": "Community Crop Productions",
            },
        ),
        migrations.AddField(
            model_name="community",
            name="livelihood_zone_baseline",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="communities",
                to="baseline.livelihoodzonebaseline",
                verbose_name="Livelihood Zone Baseline",
            ),
        ),
        migrations.CreateModel(
            name="AnnualProductionPerformance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "performance_year_start_date",
                    models.DateField(
                        help_text="The first day of the month of the start month in the performance year",
                        verbose_name="Performance Year Start Date",
                    ),
                ),
                (
                    "performance_year_end_date",
                    models.DateField(
                        help_text="The last day of the month of the end month in the performance year",
                        verbose_name="Performance Year End Date",
                    ),
                ),
                (
                    "annual_performance",
                    models.SmallIntegerField(
                        choices=[(1, "Very Poor"), (2, "Poor"), (3, "Medium"), (4, "Good"), (5, "Very Good")],
                        help_text="Rating of the annual production performance from Very Poor (1) to Very Good (5)",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="Performance rating must be at least 1."
                            ),
                            django.core.validators.MaxValueValidator(
                                5, message="Performance rating must be at most 5."
                            ),
                        ],
                        verbose_name="Seasonal Performance",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Annual Production Performance",
                "verbose_name_plural": "Annual Production Performance",
            },
        ),
        migrations.CreateModel(
            name="BaselineLivelihoodActivity",
            fields=[],
            options={
                "verbose_name": "Baseline Livelihood Activity",
                "verbose_name_plural": "Baseline Livelihood Activities",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="BaselineWealthGroup",
            fields=[],
            options={
                "verbose_name": "Baseline Wealth Group",
                "verbose_name_plural": "Baseline Wealth Groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.wealthgroup",),
        ),
        migrations.CreateModel(
            name="CommunityWealthGroup",
            fields=[],
            options={
                "verbose_name": "Community Wealth Group",
                "verbose_name_plural": "Community Wealth Groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.wealthgroup",),
        ),
        migrations.CreateModel(
            name="CropProduction",
            fields=[],
            options={
                "verbose_name": "Crop Production",
                "verbose_name_plural": "Crop Production",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="Fishing",
            fields=[],
            options={
                "verbose_name": "Fishing",
                "verbose_name_plural": "Fishing",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="LivestockSale",
            fields=[],
            options={
                "verbose_name": "Livestock Sale",
                "verbose_name_plural": "Livestock Sales",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="ResponseLivelihoodActivity",
            fields=[],
            options={
                "verbose_name": "Response Livelihood Activity",
                "verbose_name_plural": "Response Livelihood Activities",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="WildFoodGathering",
            fields=[],
            options={
                "verbose_name": "Wild Food Gathering",
                "verbose_name_plural": "Wild Food Gathering",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.AddConstraint(
            model_name="wealthgroupcharacteristicvalue",
            constraint=models.UniqueConstraint(
                fields=("wealth_group", "wealth_characteristic", "reference_type", "product"),
                name="baseline_wealthgroupcharacteristicvalue_group_characteristic_reference_type_product_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="wealthgroup",
            constraint=models.UniqueConstraint(
                fields=("livelihood_zone_baseline", "wealth_group_category", "community"),
                name="baseline_wealthgroup_livelihood_zone_baseline_wealth_group_category_community_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="wealthgroup",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"), name="baseline_wealthgroup_id_livelihood_zone_baseline_uniq"
            ),
        ),
        migrations.AddConstraint(
            model_name="seasonalactivity",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"),
                name="baseline_seasonalactivity_id_livelihood_zone_baseline_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="livelihoodzonebaseline",
            constraint=models.UniqueConstraint(
                fields=("livelihood_zone", "reference_year_end_date"),
                name="baseline_livelihoodzonebaseline_livelihood_zone_reference_year_end_date_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="livelihoodstrategy",
            constraint=models.UniqueConstraint(
                fields=("livelihood_zone_baseline", "strategy_type", "season", "product", "additional_identifier"),
                name="baseline_livelihoodstrategy_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="livelihoodstrategy",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"),
                name="baseline_livelihoodstrategy_id_livelihood_zone_baseline_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="livelihoodstrategy",
            constraint=models.UniqueConstraint(
                fields=("id", "season"), name="baseline_livelihoodstrategy_id_season_uniq"
            ),
        ),
        migrations.AddConstraint(
            model_name="community",
            constraint=models.UniqueConstraint(
                fields=("livelihood_zone_baseline", "full_name"),
                name="baseline_community_livelihood_zone_baseline_full_name_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="community",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"), name="baseline_community_id_livelihood_zone_baseline_uniq"
            ),
        ),
    ]
