# Generated by Django 4.2.2 on 2023-06-16 09:04

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import common.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("metadata", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Community",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", common.fields.NameField(max_length=60, verbose_name="name")),
                (
                    "interview_number",
                    models.PositiveSmallIntegerField(
                        help_text="The interview number from 1 - 12 assigned to the Community",
                        verbose_name="Interview Number",
                    ),
                ),
                (
                    "interviewers",
                    models.CharField(
                        help_text="The names of interviewers who interviewed the Community, in case any clarification is neeeded.",
                        verbose_name="Interviewers",
                    ),
                ),
                ("population_estimate", models.PositiveIntegerField(verbose_name="Population Estimate")),
            ],
            options={
                "verbose_name": "Community",
                "verbose_name_plural": "Communities",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodZone",
            fields=[
                (
                    "code",
                    models.CharField(
                        help_text="Primary identifier for the Livelihood Zone",
                        max_length=25,
                        primary_key=True,
                        serialize=False,
                        verbose_name="code",
                    ),
                ),
                ("name", common.fields.NameField(max_length=60, verbose_name="name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Zone",
                "verbose_name_plural": "Livelihood Zones",
            },
        ),
        migrations.CreateModel(
            name="Market",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", common.fields.NameField(max_length=60, verbose_name="Name")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SeasonalActivity",
            fields=[
                (
                    "es_name",
                    common.fields.NameField(
                        blank=True,
                        help_text="Spanish name if different from the English name",
                        max_length=60,
                        verbose_name="Spanish name",
                    ),
                ),
                (
                    "fr_name",
                    common.fields.NameField(
                        blank=True,
                        help_text="French name if different from the English name",
                        max_length=60,
                        verbose_name="French name",
                    ),
                ),
                (
                    "pt_name",
                    common.fields.NameField(
                        blank=True,
                        help_text="Portuguese name if different from the English name",
                        max_length=60,
                        verbose_name="Portuguese name",
                    ),
                ),
                (
                    "ar_name",
                    common.fields.NameField(
                        blank=True,
                        help_text="Arabic name if different from the English name",
                        max_length=60,
                        verbose_name="Arabic name",
                    ),
                ),
                (
                    "code",
                    common.fields.CodeField(max_length=60, primary_key=True, serialize=False, verbose_name="code"),
                ),
                ("name", common.fields.NameField(max_length=60, verbose_name="name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="description",
                    ),
                ),
                (
                    "is_weather_related",
                    models.BooleanField(
                        help_text="If the activity is a representation of the weather eg. rainy, dry",
                        verbose_name="Weather related",
                    ),
                ),
                (
                    "activity_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.seasonalactivitycategory",
                        verbose_name="Activity Category",
                    ),
                ),
                (
                    "dimension_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="metadata.dimensiontype"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SourceOrganization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", common.fields.NameField(max_length=200, unique=True, verbose_name="name")),
                ("full_name", common.fields.NameField(max_length=300, unique=True, verbose_name="full name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Source Organization",
                "verbose_name_plural": "Source Organizations",
            },
        ),
        migrations.CreateModel(
            name="WealthGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "percentage_of_households",
                    models.PositiveSmallIntegerField(
                        help_text="Percentage of households in the Community that are in this Wealth Group",
                        verbose_name="Percentage of households",
                    ),
                ),
                ("average_household_size", models.PositiveSmallIntegerField(verbose_name="Average household size")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="baseline.community", verbose_name="Community"
                    ),
                ),
                (
                    "wealth_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.wealthcategory",
                        verbose_name="Wealth Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group",
                "verbose_name_plural": "Wealth Groups",
            },
        ),
        migrations.CreateModel(
            name="WealthGroupLivestock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
            ],
            options={
                "verbose_name": "Wealth Group Livestock",
                "verbose_name_plural": "Wealth Group Livestock",
            },
        ),
        migrations.CreateModel(
            name="WealthGroupIncome",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.DecimalField(decimal_places=2, max_digits=9, verbose_name="Amount")),
                (
                    "income_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.incomesource",
                        verbose_name="Income Source",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group Income",
                "verbose_name_plural": "Wealth Group Incomes",
            },
        ),
        migrations.CreateModel(
            name="WealthGroupFood",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.DecimalField(decimal_places=2, max_digits=9, verbose_name="Amount")),
                (
                    "food_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.foodsource",
                        verbose_name="Food Source",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group Food",
                "verbose_name_plural": "Wealth Group Foods",
            },
        ),
        migrations.CreateModel(
            name="WealthGroupExpenditure",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.DecimalField(decimal_places=2, max_digits=9, verbose_name="Amount")),
                (
                    "expenditure_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.expenditurecategory",
                        verbose_name="Expenditure Category",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group Income",
                "verbose_name_plural": "Wealth Group Incomes",
            },
        ),
        migrations.CreateModel(
            name="WealthGroupAttribute",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.IntegerField(verbose_name="Value")),
                (
                    "attribute_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.wealthgroupattributetype",
                        verbose_name="Attribute Type",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group Attribute",
                "verbose_name_plural": "Wealth Group Attributes",
            },
        ),
        migrations.CreateModel(
            name="WealthGroupAsset",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("quantity", common.fields.PrecisionField(decimal_places=16, max_digits=38)),
                ("quantity_usd", common.fields.PrecisionField(decimal_places=16, max_digits=38)),
                ("quantity_kcals", common.fields.PrecisionField(decimal_places=16, max_digits=38)),
                ("item", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="metadata.item")),
                ("unit", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="metadata.unitofmeasure")),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SeasonalCalendar",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("activity_occurence", models.JSONField(verbose_name="Activity occurence")),
                (
                    "who_does_the_activity",
                    models.CharField(
                        choices=[("men", "Men"), ("women", "Women"), ("children", "Children"), ("all", "All")],
                        verbose_name="Activity done by",
                    ),
                ),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.seasonalactivity",
                        verbose_name="Seasonal Activity",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Season",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=50, verbose_name="Name")),
                ("description", models.TextField(max_length=255, verbose_name="Description")),
                (
                    "start_month",
                    models.IntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        help_text="The typical first month of the Season",
                        verbose_name="Start Month",
                    ),
                ),
                (
                    "end_month",
                    models.IntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        help_text="The typical end month of the Season",
                        verbose_name="End Month",
                    ),
                ),
                (
                    "alignment",
                    models.CharField(
                        choices=[("Start", "Start"), ("End", "End")],
                        default="End",
                        max_length=5,
                        verbose_name="Year alignment",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        help_text="The order of the Season with the Season Year", verbose_name="Order"
                    ),
                ),
                (
                    "rain_fall_record",
                    models.DecimalField(decimal_places=2, max_digits=10, verbose_name="Rainfall record"),
                ),
                (
                    "livelihood_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.livelihoodzone",
                        verbose_name="livelihood zone",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MarketPrice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "low_price",
                    common.fields.PrecisionField(decimal_places=16, max_digits=38, verbose_name="Low price"),
                ),
                (
                    "low_price_month",
                    models.SmallIntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        verbose_name="Low Price Month",
                    ),
                ),
                (
                    "high_price",
                    common.fields.PrecisionField(decimal_places=16, max_digits=38, verbose_name="High price"),
                ),
                (
                    "high_price_month",
                    models.SmallIntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        verbose_name="High Price Month",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "crop_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.croptype",
                        verbose_name="Crop Type",
                    ),
                ),
                (
                    "livestock_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.livestocktype",
                        verbose_name="Livestock type",
                    ),
                ),
                ("market", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="baseline.market")),
                ("other_item", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="metadata.item")),
                (
                    "unit_of_measure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.unitofmeasure",
                        verbose_name="Unit of measure",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LivelihoodZoneBaseline",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("bss", models.FileField(upload_to="baseline/bss", verbose_name="BSS Excel file")),
                (
                    "reference_year_start_date",
                    models.DateField(
                        help_text="The first day of the month of the start month in the reference year",
                        verbose_name="Reference Year Start Date",
                    ),
                ),
                (
                    "reference_year_end_date",
                    models.DateField(
                        help_text="The last day of the month of the end month in the reference year",
                        verbose_name="Reference Year End Date",
                    ),
                ),
                (
                    "valid_from_date",
                    models.DateField(
                        help_text="The first day of the month that this baseline is valid from",
                        verbose_name="Valid From Date",
                    ),
                ),
                (
                    "valid_to_date",
                    models.DateField(
                        help_text="The last day of the month that this baseline is valid until",
                        verbose_name="Valid To Date",
                    ),
                ),
                (
                    "livelihood_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.livelihoodzone",
                        verbose_name="Livelihood Zone",
                    ),
                ),
                (
                    "main_livelihood_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.livelihoodcategory",
                        verbose_name="Livelihood Zone Type",
                    ),
                ),
                (
                    "source_organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.sourceorganization",
                        verbose_name="Source Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Zone Baseline",
                "verbose_name_plural": "Livelihood Zone Baselines",
            },
        ),
        migrations.CreateModel(
            name="Hazard",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_chronic", models.BooleanField(verbose_name="Is Chronic")),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1900, message="Year must be greater than or equal to 1900."
                            ),
                            django.core.validators.MaxValueValidator(
                                2100, message="Year must be less than or equal to 2100."
                            ),
                        ]
                    ),
                ),
                (
                    "seasonal_performance",
                    models.SmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="Performance rank must be at least 1."
                            ),
                            django.core.validators.MaxValueValidator(5, message="Performance rank must be at most 5."),
                        ]
                    ),
                ),
                (
                    "event",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=255,
                        null=True,
                        verbose_name="Description of event(s)",
                    ),
                ),
                (
                    "response",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=255,
                        null=True,
                        verbose_name="Description of event(s)",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "hazard_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.hazardcateogy",
                        verbose_name="Hazard Category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommunityLivestock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "birth_interval",
                    models.PositiveSmallIntegerField(
                        help_text="Number of months between Births", verbose_name="Birth Interval"
                    ),
                ),
                (
                    "wet_season_lactation_period",
                    models.PositiveSmallIntegerField(
                        help_text="Number of days of lactation during the wet season",
                        verbose_name="Wet Season Lactation Period",
                    ),
                ),
                (
                    "wet_season_milk_production",
                    models.PositiveSmallIntegerField(
                        help_text="Number of litres produced each day during the wet season",
                        verbose_name="Wet Season Milk Production",
                    ),
                ),
                (
                    "dry_season_lactation_period",
                    models.PositiveSmallIntegerField(
                        help_text="Number of days of lactation during the dry season",
                        verbose_name="Dry Season Lactation Period",
                    ),
                ),
                (
                    "dry_season_milk_production",
                    models.PositiveSmallIntegerField(
                        help_text="Number of litres produced each day during the dry season",
                        verbose_name="Dry Season Milk Production",
                    ),
                ),
                (
                    "age_at_sale",
                    models.PositiveSmallIntegerField(
                        help_text="Age in months at which the animal is typically sold", verbose_name="Age at Sale"
                    ),
                ),
                ("additional_attributes", models.JSONField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.community",
                        verbose_name="Wealth Group",
                    ),
                ),
                (
                    "livestock_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.livestocktype",
                        verbose_name="Livestock Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group Attribute",
                "verbose_name_plural": "Wealth Group Attributes",
            },
        ),
        migrations.CreateModel(
            name="CommunityCropProduction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "crop_purpose",
                    models.CharField(
                        choices=[("main_crop", "Main Food Crop"), ("cash_crop", "Cash Crop")],
                        max_length=20,
                        verbose_name="Crop purpose",
                    ),
                ),
                (
                    "production_with_inputs",
                    common.fields.PrecisionField(
                        decimal_places=16,
                        help_text="Yield in reference period with input (seed and fertilizer)",
                        max_digits=38,
                        verbose_name="Production with input",
                    ),
                ),
                (
                    "production_with_out_inputs",
                    common.fields.PrecisionField(
                        decimal_places=16,
                        help_text="Yield in reference period without input (seed and fertilizer)",
                        max_digits=38,
                        verbose_name="Production with input",
                    ),
                ),
                (
                    "seed_requirement",
                    common.fields.PrecisionField(decimal_places=16, max_digits=38, verbose_name="Seed requirement"),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "crop_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT, to="metadata.croptype", verbose_name="Crop Type"
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT, to="baseline.season", verbose_name="Season"
                    ),
                ),
                (
                    "unit_of_land",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.unitofmeasure",
                        verbose_name="Unit of land",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="community",
            name="livelihood_zone_baseline",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="baseline.livelihoodzonebaseline",
                verbose_name="Livelihood Zone",
            ),
        ),
    ]
