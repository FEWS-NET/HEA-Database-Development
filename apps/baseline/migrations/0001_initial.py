# Generated by Django 4.2.2 on 2023-07-15 22:27

import common.fields
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("common", "0002_load_countries"),
        ("metadata", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Community",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", common.fields.NameField(max_length=60, verbose_name="Name")),
                (
                    "geography",
                    django.contrib.gis.db.models.fields.GeometryField(
                        blank=True, geography=True, null=True, srid=4326, verbose_name="geography"
                    ),
                ),
                (
                    "interview_number",
                    models.CharField(
                        help_text="The interview number from 1 - 12 or interview code assigned to the Community",
                        max_length=10,
                        verbose_name="Interview Number",
                    ),
                ),
                (
                    "interviewers",
                    models.CharField(
                        help_text="The names of interviewers who interviewed the Community, in case any clarification is neeeded.",
                        verbose_name="Interviewers",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community",
                "verbose_name_plural": "Communities",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodActivity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            ("MilkProduction", "Milk Production"),
                            ("ButterProduction", "Butter Production"),
                            ("MeatProduction", "Meat Production"),
                            ("LivestockSales", "Livestock Sales"),
                            ("CropProduction", "Crop Production"),
                            ("FoodPurchase", "Food Purchase"),
                            ("PaymentInKind", "Payment in Kind"),
                            ("ReliefGiftsOther", "Relief, Gifts and Other Food"),
                            ("Fishing", "Fishing"),
                            ("WildFoodGathering", "Wild Food Gathering"),
                            ("OtherCashIncome", "Other Cash Income"),
                            ("OtherPurchases", "Other Purchases"),
                        ],
                        db_index=True,
                        help_text="The type of livelihood strategy, such as crop production, or wild food gathering.",
                        max_length=30,
                        verbose_name="Strategy Type",
                    ),
                ),
                ("quantity_produced", models.PositiveSmallIntegerField(verbose_name="Quantity Produced")),
                ("quantity_sold", models.PositiveSmallIntegerField(verbose_name="Quantity Sold/Exchanged")),
                ("quantity_other_uses", models.PositiveSmallIntegerField(verbose_name="Quantity Other Uses")),
                ("quantity_consumed", models.PositiveSmallIntegerField(verbose_name="Quantity Consumed")),
                ("price", models.FloatField(blank=True, help_text="Price per unit", null=True, verbose_name="Price")),
                ("income", models.FloatField(help_text="Income")),
                ("expenditure", models.FloatField(help_text="Expenditure")),
                (
                    "total_kcals_consumed",
                    models.PositiveSmallIntegerField(
                        help_text="Total kcals consumed by a household in the reference year from this livelihood activity",
                        verbose_name="Total kcals consumed",
                    ),
                ),
                (
                    "percentage_kcals",
                    models.PositiveSmallIntegerField(
                        help_text="Percentage of annual household kcal requirement provided by this livelihood activity",
                        verbose_name="Percentage of required kcals",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        db_column="iso4217a3",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="common.currency",
                        verbose_name="currency",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Strategy",
                "verbose_name_plural": "Livelihood Strategies",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodZone",
            fields=[
                (
                    "code",
                    models.CharField(
                        help_text="Primary identifier for the Livelihood Zone",
                        max_length=25,
                        primary_key=True,
                        serialize=False,
                        verbose_name="code",
                    ),
                ),
                ("name", common.fields.NameField(max_length=60, verbose_name="Name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="Description",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        db_column="country_code",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="common.country",
                        verbose_name="Country",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Zone",
                "verbose_name_plural": "Livelihood Zones",
            },
        ),
        migrations.CreateModel(
            name="LivelihoodZoneBaseline",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "geography",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, geography=True, null=True, srid=4326, verbose_name="geography"
                    ),
                ),
                ("bss", models.FileField(upload_to="baseline/bss", verbose_name="BSS Excel file")),
                (
                    "reference_year_start_date",
                    models.DateField(
                        help_text="The first day of the month of the start month in the reference year",
                        verbose_name="Reference Year Start Date",
                    ),
                ),
                (
                    "reference_year_end_date",
                    models.DateField(
                        help_text="The last day of the month of the end month in the reference year",
                        verbose_name="Reference Year End Date",
                    ),
                ),
                (
                    "valid_from_date",
                    models.DateField(
                        help_text="The first day of the month that this baseline is valid from",
                        verbose_name="Valid From Date",
                    ),
                ),
                (
                    "valid_to_date",
                    models.DateField(
                        help_text="The last day of the month that this baseline is valid until",
                        verbose_name="Valid To Date",
                    ),
                ),
                (
                    "population_source",
                    models.CharField(
                        blank=True,
                        help_text="The data source for the Population Estimate, e.g. National Bureau of Statistics",
                        max_length=120,
                        verbose_name="Population Source",
                    ),
                ),
                (
                    "population_estimate",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The estimated population of the Livelihood Zone during the reference year",
                        verbose_name="Population Estimate",
                    ),
                ),
                (
                    "livelihood_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.livelihoodzone",
                        verbose_name="Livelihood Zone",
                    ),
                ),
                (
                    "main_livelihood_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.livelihoodcategory",
                        verbose_name="Livelihood Zone Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Zone Baseline",
                "verbose_name_plural": "Livelihood Zone Baselines",
            },
        ),
        migrations.CreateModel(
            name="Market",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", common.fields.NameField(max_length=60, verbose_name="Name")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
            ],
            options={
                "verbose_name": "Market",
                "verbose_name_plural": "Markets",
            },
        ),
        migrations.CreateModel(
            name="SeasonalActivity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "january",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in January?", verbose_name="January"
                    ),
                ),
                (
                    "february",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in February?", verbose_name="February"
                    ),
                ),
                (
                    "march",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in March?", verbose_name="March"
                    ),
                ),
                (
                    "april",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in April?", verbose_name="April"
                    ),
                ),
                (
                    "may",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in May?", verbose_name="May"
                    ),
                ),
                (
                    "june",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in June?", verbose_name="June"
                    ),
                ),
                (
                    "july",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in July?", verbose_name="July"
                    ),
                ),
                (
                    "august",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in August?", verbose_name="August"
                    ),
                ),
                (
                    "september",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in September?", verbose_name="September"
                    ),
                ),
                (
                    "october",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in October?", verbose_name="October"
                    ),
                ),
                (
                    "november",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in November?", verbose_name="November"
                    ),
                ),
                (
                    "december",
                    models.BooleanField(
                        default=False, help_text="Is the activity undertaken in December?", verbose_name="December"
                    ),
                ),
                (
                    "months",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.BooleanField(),
                        help_text="Months the activity is undertaken in",
                        size=12,
                        verbose_name="Months",
                    ),
                ),
                (
                    "baseline_seasonal_activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="seasonal_activities",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="metadata.season", verbose_name="Season"
                    ),
                ),
            ],
            options={
                "verbose_name": "Seasonal Activity",
                "verbose_name_plural": "Seasonal Activities",
            },
        ),
        migrations.CreateModel(
            name="SeasonalActivityType",
            fields=[
                (
                    "dimension_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="metadata.dimension",
                    ),
                ),
                ("name", common.fields.NameField(max_length=60, verbose_name="Name")),
                (
                    "activity_category",
                    models.CharField(
                        choices=[
                            ("crop", "Crops"),
                            ("livestock", "Livestock"),
                            ("gardening", "Gardening"),
                            ("fishing", "Fishing"),
                        ],
                        max_length=20,
                        verbose_name="Activity Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Seasonal Activity Type",
                "verbose_name_plural": "Seasonal Activity Types",
            },
            bases=("metadata.dimension",),
        ),
        migrations.CreateModel(
            name="SourceOrganization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", common.fields.NameField(max_length=200, unique=True, verbose_name="Name")),
                ("full_name", common.fields.NameField(max_length=300, unique=True, verbose_name="full name")),
                (
                    "description",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=2000,
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Source Organization",
                "verbose_name_plural": "Source Organizations",
            },
        ),
        migrations.CreateModel(
            name="WealthGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "percentage_of_households",
                    models.PositiveSmallIntegerField(
                        help_text="Percentage of households in the Community or Livelihood Zone that are in this Wealth Group",
                        verbose_name="Percentage of households",
                    ),
                ),
                ("average_household_size", models.PositiveSmallIntegerField(verbose_name="Average household size")),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.community",
                        verbose_name="Community",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wealth_groups",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "wealth_category",
                    models.ForeignKey(
                        help_text="Wealth Category, e.g. Poor or Better Off",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="metadata.wealthcategory",
                        verbose_name="Wealth Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group",
                "verbose_name_plural": "Wealth Groups",
            },
        ),
        migrations.CreateModel(
            name="ButterProduction",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Butter Production",
                "verbose_name_plural": "Butter Production",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="CropProduction",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "production_system",
                    models.CharField(
                        default="rainfed",
                        help_text="Production system used to grow the crop, such as rainfed or irrigated",
                        max_length=60,
                        verbose_name="Production System",
                    ),
                ),
            ],
            options={
                "verbose_name": "Crop Production",
                "verbose_name_plural": "Crop Production",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="FoodPurchase",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "unit_multiple",
                    models.PositiveSmallIntegerField(
                        help_text="Multiple of the unit of measure in a single purchase", verbose_name="Unit Multiple"
                    ),
                ),
                ("purchases_per_month", models.PositiveSmallIntegerField(verbose_name="Purchases per month")),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of months in a year that the product is purchased",
                        verbose_name="Months per year",
                    ),
                ),
            ],
            options={
                "verbose_name": "Food Purchase",
                "verbose_name_plural": "Food Purchases",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="LivestockSales",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "product_destination",
                    models.CharField(
                        help_text="The product destination, e.g. local or export", verbose_name="Product Destination"
                    ),
                ),
                ("animals_sold", models.PositiveSmallIntegerField(verbose_name="Number of animals sold")),
            ],
            options={
                "verbose_name": "Livestock Sales",
                "verbose_name_plural": "Livestock Sales",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="MeatProduction",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "animals_slaughtered",
                    models.PositiveSmallIntegerField(verbose_name="Number of animals slaughtered"),
                ),
                ("item_yield", models.FloatField(verbose_name="Carcass weight per animal")),
            ],
            options={
                "verbose_name": "Meat Production",
                "verbose_name_plural": "Meat Production",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="MilkProduction",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                ("milking_animals", models.PositiveSmallIntegerField(verbose_name="Number of milking animals")),
                (
                    "lactation_days",
                    models.PositiveSmallIntegerField(verbose_name="Average number or days of lactation"),
                ),
                (
                    "daily_production",
                    models.PositiveSmallIntegerField(verbose_name="Average daily milk production per animal"),
                ),
                (
                    "type_of_milk_sold_or_other_uses",
                    models.CharField(
                        choices=[("skim", "skim"), ("whole", "whole")], verbose_name="Skim or whole milk sold or used"
                    ),
                ),
            ],
            options={
                "verbose_name": "Milk Production",
                "verbose_name_plural": "Milk Production",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="OtherCashIncome",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "people_per_hh",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of household members who perform the labor",
                        null=True,
                        verbose_name="People per household",
                    ),
                ),
                (
                    "labor_per_month",
                    models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Labor per month"),
                ),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of months in a year that the labor is performed",
                        null=True,
                        verbose_name="Months per year",
                    ),
                ),
                (
                    "times_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of times in a year that the income is received",
                        verbose_name="Times per year",
                    ),
                ),
            ],
            options={
                "verbose_name": "Other Cash Income",
                "verbose_name_plural": "Other Cash Income",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="OtherPurchases",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "unit_multiple",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Multiple of the unit of measure in a single purchase",
                        null=True,
                        verbose_name="Unit Multiple",
                    ),
                ),
                (
                    "purchases_per_month",
                    models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Purchases per month"),
                ),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Number of months in a year that the product is purchased",
                        null=True,
                        verbose_name="Months per year",
                    ),
                ),
            ],
            options={
                "verbose_name": "Other Purchases",
                "verbose_name_plural": "Other Purchases",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="PaymentInKind",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "people_per_hh",
                    models.PositiveSmallIntegerField(
                        help_text="Number of household members who perform the labor",
                        verbose_name="People per household",
                    ),
                ),
                ("labor_per_month", models.PositiveSmallIntegerField(verbose_name="Labor per month")),
                (
                    "months_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of months in a year that the labor is performed",
                        verbose_name="Months per year",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment in Kind",
                "verbose_name_plural": "Payments in Kind",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="ReliefGiftsOther",
            fields=[
                (
                    "livelihoodactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="baseline.livelihoodactivity",
                    ),
                ),
                (
                    "unit_multiple",
                    models.PositiveSmallIntegerField(
                        help_text="Multiple of the unit of measure in a single gift", verbose_name="Unit Multiple"
                    ),
                ),
                (
                    "received_per_year",
                    models.PositiveSmallIntegerField(
                        help_text="Number of times in a year that the item is received", verbose_name="Gifts per year"
                    ),
                ),
            ],
            options={
                "verbose_name": "Relief, Gifts and Other Food",
                "verbose_name_plural": "Relief, Gifts and Other Food",
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="WealthGroupCharacteristicValue",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "value",
                    models.JSONField(
                        help_text="A single property value, eg, a float, str or list, not a dict of props.",
                        verbose_name="value",
                    ),
                ),
                (
                    "wealth_characteristic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.wealthcharacteristic",
                        verbose_name="Wealth Characteristic",
                    ),
                ),
                (
                    "wealth_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.wealthgroup",
                        verbose_name="Wealth Group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Characteristic Value",
                "verbose_name_plural": "Wealth Characteristic Values",
            },
        ),
        migrations.CreateModel(
            name="Staple",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="staple_foods",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="staple_foods",
                        to="common.classifiedproduct",
                        verbose_name="Item",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SeasonalActivityMonth",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "month",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        validators=[
                            django.core.validators.MaxValueValidator(12),
                            django.core.validators.MinValueValidator(1),
                        ],
                        verbose_name="Month",
                    ),
                ),
                (
                    "seasonal_activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.seasonalactivity",
                        verbose_name="Seasonal Activity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Seasonal Activity Month",
                "verbose_name_plural": "Seasonal Activity Months",
            },
        ),
        migrations.CreateModel(
            name="MarketPrice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("low_price", models.FloatField(verbose_name="Low price")),
                (
                    "low_price_month",
                    models.SmallIntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        verbose_name="Low Price Month",
                    ),
                ),
                ("high_price", models.FloatField(verbose_name="High price")),
                (
                    "high_price_month",
                    models.SmallIntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        verbose_name="High Price Month",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                ("market", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="baseline.market")),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Crop, livestock or other category of items",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="market_prices",
                        to="common.classifiedproduct",
                    ),
                ),
                (
                    "unit_of_measure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="common.unitofmeasure",
                        verbose_name="Unit of measure",
                    ),
                ),
            ],
            options={
                "verbose_name": "MarketPrice",
                "verbose_name_plural": "MarketPrices",
            },
        ),
        migrations.AddField(
            model_name="livelihoodzonebaseline",
            name="source_organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                to="baseline.sourceorganization",
                verbose_name="Source Organization",
            ),
        ),
        migrations.CreateModel(
            name="LivelihoodStrategy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            ("MilkProduction", "Milk Production"),
                            ("ButterProduction", "Butter Production"),
                            ("MeatProduction", "Meat Production"),
                            ("LivestockSales", "Livestock Sales"),
                            ("CropProduction", "Crop Production"),
                            ("FoodPurchase", "Food Purchase"),
                            ("PaymentInKind", "Payment in Kind"),
                            ("ReliefGiftsOther", "Relief, Gifts and Other Food"),
                            ("Fishing", "Fishing"),
                            ("WildFoodGathering", "Wild Food Gathering"),
                            ("OtherCashIncome", "Other Cash Income"),
                            ("OtherPurchases", "Other Purchases"),
                        ],
                        db_index=True,
                        help_text="The type of livelihood strategy, such as crop production, or wild food gathering.",
                        max_length=30,
                        verbose_name="Strategy Type",
                    ),
                ),
                (
                    "additional_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Additional text identifying the livelihood strategy",
                        verbose_name="Additional Identifer",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="livelihood_strategies",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Item Produced, eg, full fat milk",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="livelihood_strategies",
                        to="common.classifiedproduct",
                        verbose_name="Item",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="metadata.season", verbose_name="Season"
                    ),
                ),
            ],
            options={
                "verbose_name": "Livelihood Strategy",
                "verbose_name_plural": "Livelihood Strategies",
            },
        ),
        migrations.AddField(
            model_name="livelihoodactivity",
            name="livelihood_strategy",
            field=models.ForeignKey(
                help_text="Livelihood Strategy",
                on_delete=django.db.models.deletion.PROTECT,
                to="baseline.livelihoodstrategy",
            ),
        ),
        migrations.AddField(
            model_name="livelihoodactivity",
            name="livelihood_zone_baseline",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="livelihood_activities",
                to="baseline.livelihoodzonebaseline",
                verbose_name="Livelihood Zone Baseline",
            ),
        ),
        migrations.AddField(
            model_name="livelihoodactivity",
            name="unit_of_measure",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="common.unitofmeasure", verbose_name="Unit of Measure"
            ),
        ),
        migrations.AddField(
            model_name="livelihoodactivity",
            name="wealth_group",
            field=models.ForeignKey(
                help_text="Wealth Group", on_delete=django.db.models.deletion.PROTECT, to="baseline.wealthgroup"
            ),
        ),
        migrations.CreateModel(
            name="Hazard",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_chronic", models.BooleanField(verbose_name="Is Chronic")),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1900, message="Year must be greater than or equal to 1900."
                            ),
                            django.core.validators.MaxValueValidator(
                                2100, message="Year must be less than or equal to 2100."
                            ),
                        ]
                    ),
                ),
                (
                    "seasonal_performance",
                    models.SmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="Performance rank must be at least 1."
                            ),
                            django.core.validators.MaxValueValidator(5, message="Performance rank must be at most 5."),
                        ]
                    ),
                ),
                (
                    "event",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=255,
                        null=True,
                        verbose_name="Description of event(s)",
                    ),
                ),
                (
                    "response",
                    common.fields.DescriptionField(
                        blank=True,
                        help_text="Any extra information or detail that is relevant to the object.",
                        max_length=255,
                        null=True,
                        verbose_name="Description of event(s)",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "hazard_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.hazardcategory",
                        verbose_name="Hazard Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hazard",
                "verbose_name_plural": "Hazards",
            },
        ),
        migrations.CreateModel(
            name="CommunityLivestock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "birth_interval",
                    models.PositiveSmallIntegerField(
                        help_text="Number of months between Births", verbose_name="Birth Interval"
                    ),
                ),
                (
                    "wet_season_lactation_period",
                    models.PositiveSmallIntegerField(
                        help_text="Number of days of lactation during the wet season",
                        verbose_name="Wet Season Lactation Period",
                    ),
                ),
                (
                    "wet_season_milk_production",
                    models.PositiveSmallIntegerField(
                        help_text="Number of litres produced each day during the wet season",
                        verbose_name="Wet Season Milk Production",
                    ),
                ),
                (
                    "dry_season_lactation_period",
                    models.PositiveSmallIntegerField(
                        help_text="Number of days of lactation during the dry season",
                        verbose_name="Dry Season Lactation Period",
                    ),
                ),
                (
                    "dry_season_milk_production",
                    models.PositiveSmallIntegerField(
                        help_text="Number of litres produced each day during the dry season",
                        verbose_name="Dry Season Milk Production",
                    ),
                ),
                (
                    "age_at_sale",
                    models.PositiveSmallIntegerField(
                        help_text="Age in months at which the animal is typically sold/exchanged",
                        verbose_name="Age at Sale",
                    ),
                ),
                ("additional_attributes", models.JSONField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.community",
                        verbose_name="Wealth Group",
                    ),
                ),
                (
                    "livestock_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="metadata.livestocktype",
                        verbose_name="Livestock Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wealth Group Attribute",
                "verbose_name_plural": "Wealth Group Attributes",
            },
        ),
        migrations.CreateModel(
            name="CommunityCropProduction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "crop_purpose",
                    models.CharField(
                        choices=[("main_crop", "Main Food Crop"), ("cash_crop", "Cash Crop")],
                        max_length=20,
                        verbose_name="Crop purpose",
                    ),
                ),
                (
                    "production_with_inputs",
                    models.FloatField(
                        help_text="Yield in reference period with input (seed and fertilizer)",
                        verbose_name="Production with input",
                    ),
                ),
                (
                    "production_with_out_inputs",
                    models.FloatField(
                        help_text="Yield in reference period without input (seed and fertilizer)",
                        verbose_name="Production with out input",
                    ),
                ),
                ("seed_requirement", models.FloatField(verbose_name="Seed requirement")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.community",
                        verbose_name="Community or Village",
                    ),
                ),
                (
                    "crop_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT, to="metadata.croptype", verbose_name="Crop Type"
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT, to="metadata.season", verbose_name="Season"
                    ),
                ),
                (
                    "unit_of_land",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="common.unitofmeasure",
                        verbose_name="Unit of land",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Crop Production",
                "verbose_name_plural": "Community Crop Productions",
            },
        ),
        migrations.AddField(
            model_name="community",
            name="livelihood_zone_baseline",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="communities",
                to="baseline.livelihoodzonebaseline",
                verbose_name="Livelihood Zone Baseline",
            ),
        ),
        migrations.CreateModel(
            name="BaselineSeasonalActivity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "who_does_the_activity",
                    models.CharField(
                        choices=[
                            ("men", "Mainly Men"),
                            ("women", "Mainly Women"),
                            ("children", "Mainly Children"),
                            ("all", "All Together"),
                        ],
                        verbose_name="Activity done by",
                    ),
                ),
                (
                    "activity_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="baseline.seasonalactivitytype",
                        verbose_name="Seasonal Activity Type",
                    ),
                ),
                (
                    "livelihood_strategy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="baseline.livelihoodstrategy",
                        verbose_name="Livelihood Strategy",
                    ),
                ),
                (
                    "livelihood_zone_baseline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="baseline_seasonal_activities",
                        to="baseline.livelihoodzonebaseline",
                        verbose_name="Livelihood Zone Baseline",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        help_text="Item Produced, eg, full fat milk",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="baseline_seasonal_activities",
                        to="common.classifiedproduct",
                        verbose_name="Item",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="metadata.season", verbose_name="Season"
                    ),
                ),
            ],
            options={
                "verbose_name": "Baseline Seasonal Activity",
                "verbose_name_plural": "Baseline Seasonal Activities",
            },
        ),
        migrations.CreateModel(
            name="BaselineWealthGroup",
            fields=[],
            options={
                "verbose_name": "Baseline Wealth Group",
                "verbose_name_plural": "Baseline Wealth Groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.wealthgroup",),
        ),
        migrations.CreateModel(
            name="CommunityWealthGroup",
            fields=[],
            options={
                "verbose_name": "Community Wealth Group",
                "verbose_name_plural": "Community Wealth Groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.wealthgroup",),
        ),
        migrations.CreateModel(
            name="Fishing",
            fields=[],
            options={
                "verbose_name": "Fishing",
                "verbose_name_plural": "Fishing",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.CreateModel(
            name="WildFoodGathering",
            fields=[],
            options={
                "verbose_name": "Wild Food Gathering",
                "verbose_name_plural": "Wild Food Gathering",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("baseline.livelihoodactivity",),
        ),
        migrations.AddConstraint(
            model_name="wealthgroup",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"), name="baseline_wealthgroup_id_livelihood_zone_baseline_uniq"
            ),
        ),
        migrations.AddConstraint(
            model_name="seasonalactivitymonth",
            constraint=models.UniqueConstraint(
                fields=("seasonal_activity", "month"), name="baseline_seasonalactivitymonth_uniq"
            ),
        ),
        migrations.AddConstraint(
            model_name="livelihoodstrategy",
            constraint=models.UniqueConstraint(
                fields=("livelihood_zone_baseline", "strategy_type", "season", "product", "additional_identifier"),
                name="baseline_livelihoodstrategy_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="livelihoodstrategy",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"),
                name="baseline_livelihoodstrategy_id_livelihood_zone_baseline_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="livelihoodstrategy",
            constraint=models.UniqueConstraint(
                fields=("id", "season"), name="baseline_livelihoodstrategy_id_season_uniq"
            ),
        ),
        migrations.AddConstraint(
            model_name="community",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"), name="baseline_community_id_livelihood_zone_baseline_uniq"
            ),
        ),
        migrations.AddConstraint(
            model_name="baselineseasonalactivity",
            constraint=models.UniqueConstraint(
                fields=("id", "livelihood_zone_baseline"),
                name="baseline_baselineseasonalactivity_id_livelihood_zone_baseline_uniq",
            ),
        ),
        migrations.AddConstraint(
            model_name="baselineseasonalactivity",
            constraint=models.UniqueConstraint(
                fields=("id", "season"), name="baseline_baselineseasonalactivity_id_season_uniq"
            ),
        ),
    ]
