version: "3.7"
services:
  db:
    restart: unless-stopped
    build:
      context: ./docker/db
    shm_size: 2G
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      CLIENT: ${CLIENT}
      APP: ${APP}
      ENV: ${ENV}
      PGPASSWORD: ${PGPASSWORD}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      PGUSER: ${CLIENT}${APP}${ENV}
      PGDATABASE: ${CLIENT}${APP}${ENV}
      CREATE_TEMPLATE: "true"
    command:
      # See https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server
      # and https://www.postgresql.org/docs/10/static/runtime-config-resource.html
      # and https://dev.to/pythonmeister/basic-postgresql-tuning-parameters-281
      # and https://pgtune.leopard.in.ua/#/
      # and https://sudonull.com/post/31544-How-One-PostgreSQL-Configuration-Change-Improves-Slow-Query-Performance-50-Times
      - -c
      - max_locks_per_transaction=2048
      # Set shared buffers to 25% of allowable memory for the container
      - -c
      - shared_buffers=500MB
      # Set effective_cache_size to 75% of allowable memory for the container
      # i.e. 3 * shared_buffers
      - -c
      - effective_cache_size=1500MB
      - -c
      - work_mem=150MB
      - -c
      - maintenance_work_mem=200MB
      - -c
      - max_stack_depth=4096
      - -c
      - checkpoint_timeout=60min
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - max_wal_size=10GB
      # Set effective_io_concurrency to 200 for SSDs, or 1 for HDD
      - -c
      - effective_io_concurrency=200
      # Set seq_page_cost to 0.1 for SSDs, or 1 for HDD
      - -c
      - seq_page_cost=0.1
      # Set random_page_cost to 0.11 for SSDs, or 4 for HDD
      - -c
      - random_page_cost=0.11


  # MinIO is an Amazon S3 compatible object storage server.
  minio:
    restart: unless-stopped
    image: minio/minio:RELEASE.2023-12-06T09-09-22Z
    volumes:
      - minio_data:/data
    environment:
      # These credentials need to be provided by client's wishing to access the storage server
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command:
      - server
      - --console-address
      - ":9010"
      - /data

  app:
    restart: unless-stopped
    build:
      context: .
      target: prod
      dockerfile: ./docker/app/Dockerfile
      args:
        - PIP_TRUSTED_HOST
        - PIP_INDEX_URL
    depends_on:
      - db
    environment: &base_env
      CLIENT: ${CLIENT}
      APP: ${APP}
      ENV: ${ENV}
      DJANGO_SETTINGS_MODULE: ${APP}.settings.insecure
      DOMAIN: ${APP}lcl.localdomain,${APP}lcl,localhost,127.0.0.1
      SECRET_KEY: ${SECRET_KEY}
      PGHOST: ${PGHOST}
      PGPORT: ${PGPORT}
      PGUSER: ${CLIENT}${APP}${ENV}
      PGDATABASE: ${CLIENT}${APP}${ENV}
      PGPASSWORD: ${PGPASSWORD}
      DATABASE_URL: postgis://${CLIENT}${APP}${ENV}:${PGPASSWORD}@db:5432/${CLIENT}${APP}${ENV}
      DAGSTER_PGUSER: ${CLIENT}dgs${ENV}
      DAGSTER_PGPASSWORD: ${PGPASSWORD}
      DAGSTER_HOME: /usr/src/app
      DAGSTER_ASSET_BASE_PATH: ${DAGSTER_ASSET_BASE_PATH}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      AWS_ENDPOINT_URL_S3: ${MINIO_ENDPOINT_URL}
      SUPPORT_EMAIL_ADDRESS: ${SUPPORT_EMAIL_ADDRESS}
      DJANGO_MIGRATE: 1
      DD_TRACE_ENABLED: "false"
      DD_TRACE_AGENT_URL: http://localhost:8126
      DD_DOGSTATSD_URL: udp://localhost:8125
      DD_SERVICE: app
      DD_ENV: ${ENV}
      DD_TAGS: app:${APP},env:{ENV}
      DD_DJANGO_CACHE_SERVICE_NAME: django.core.cache
      KILUIGI_INTERMEDIATETARGET_BACKEND_CLASS: ${KILUIGI_INTERMEDIATETARGET_BACKEND_CLASS}
      KILUIGI_INTERMEDIATETARGET_ROOT_PATH: ${KILUIGI_INTERMEDIATETARGET_ROOT_PATH}
      KILUIGI_FINALTARGET_BACKEND_CLASS: ${KILUIGI_FINALTARGET_BACKEND_CLASS}
      KILUIGI_FINALTARGET_ROOT_PATH: ${KILUIGI_FINALTARGET_ROOT_PATH}
      KILUIGI_REPORTTARGET_BACKEND_CLASS: ${KILUIGI_REPORTTARGET_BACKEND_CLASS}
      KILUIGI_REPORTTARGET_ROOT_PATH: ${KILUIGI_REPORTTARGET_ROOT_PATH}      
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
      GOOGLE_ADMIN_EMAIL: ${GOOGLE_ADMIN_EMAIL}
    command:
      - --timeout=3600
      - --workers=12

  dagster_webserver:
    restart: unless-stopped
    image: hea-app
    depends_on:
      - db
    environment:
      <<: *base_env
      DD_SERVICE: dagster_webserver
    entrypoint: docker/app/run_dagster_webserver.sh
    x-aws-role:
      Statement:
        - Effect: "Allow"
          Action:
            - "ecs:DescribeTasks"
            - "ecs:StopTask"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "iam:PassRole"
          Resource:
            - "*"
          Condition:
            StringLike:
              iam:PassedToService: "ecs-tasks.amazonaws.com"

  dagster_daemon:
    restart: unless-stopped
    image: hea-app
    depends_on:
      - db
    environment:
      <<: *base_env
      DD_SERVICE: dagster_daemon
    entrypoint: docker/app/run_dagster_daemon.sh
    x-aws-role:
      Statement:
        - Effect: "Allow"
          Action:
            - "ec2:DescribeNetworkInterfaces"
            - "ecs:DescribeTaskDefinition"
            - "ecs:DescribeTasks"
            - "ecs:ListAccountSettings"
            - "ecs:RegisterTaskDefinition"
            - "ecs:RunTask"
            - "ecs:TagResource"
            - "secretsmanager:DescribeSecret"
            - "secretsmanager:ListSecrets"
            - "secretsmanager:GetSecretValue"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "iam:PassRole"
          Resource:
            - "*"
          Condition:
            StringLike:
              iam:PassedToService: "ecs-tasks.amazonaws.com"

volumes:
  db_data:
    external: false
  minio_data:
    external: false